//#include <iostream>
//using namespace std;
//
////동적 할당: 사용자가 직접 데이터에 대한 요청, 반납을 진행하는 방식(런 타임에 진행)
//
////동적 할당을 통해서 만들어진 데이터는 힙 영역에서 관리
//
////프로그램은 일반적으로 정적 할당(프로그램에 의한 데이터 할당)으로 설계
////-> 프로그램에서 작성되는 값들에 따라 프로그램의 용량이 확보된 상태로 만들어짐
//
////정적 할당의 경우 프로그램이 관리하기 때문에 신경 쓸 부분이 없음(편의성)
//
////동적 할당의 경우 필요한 양만큼의 데이터를 직접 관리하고 반납. 
////용량에 있어 효율적인 사용 가능(최적화)
//
////C언어에는 해당 작업을 하기 위해 다음과 같은 작업을 진행.
////1.#include <stdlib.h> 추가
////2.자료형* 변수명 = (자료형*)malloc(sizeof(데이터));
////ex) int* Array = (int*)malloc(sizeof(int)*4);  >> 16byte
////3.free(변수명); >>데이터에 대한 반납. 안할 경우 데이터 부족 현상 발생
// 
//int main()
//{
//	////C++에서 동적 할당 진행 방법
//	//int* ptr = new int; //4byte반틈의 할당 진행. 포인터로 포인팅하는 것이 가능
//	//*ptr = 10;
//
//	//cout << *ptr << endl;
//	//delete ptr; //메모리의 사용이 끝날 경우 반드시 해당 데이터 제거
//
//	//new를 통해 데이터를 더 크게 받는 경우
//	int* ptr = new int[5]; //20byte 만큼의 할당을 진행
//
//	for (int i = 0; i < 5; i++)
//	{
//		ptr[i] = 1;
//		cout << ptr[i] << " ";
//	}
//
//	delete[] ptr;
//
//	return 0;
//}